name: build

on:
  # quick tests for every pull request
  push:
    branches:
      - master
  pull_request:

jobs:
  # build:
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: false
  #     # explicit include-based build matrix, of known valid options
  #     matrix:
  #       include:
  #         - os: ubuntu-latest
  #           cuda: "11.0"
  #           gcc: 9



  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Set up Python 3.8
  #     uses: actions/setup-python@v2
  #     with:
  #       python-version: 3.8
  #   - name: cache weekly timestamp
  #     id: pip-cache
  #     run: |
  #       echo "::set-output name=datew::$(date '+%Y-%V')"
  #   - name: cache for pip
  #     uses: actions/cache@v2
  #     id: cache
  #     with:
  #       path: ~/.cache/pip
  #       key: ${{ runner.os }}-pip-${{ steps.pip-cache.outputs.datew }}
  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip wheel
  #       python -m pip install -r requirements.txt
  #       python -m pip install -r https://raw.githubusercontent.com/Project-MONAI/MONAI/master/requirements.txt
  #       python -m pip install -r https://raw.githubusercontent.com/Project-MONAI/MONAI/master/requirements-dev.txt
  #   # - name: PEP8 check
  #   #   run: |
  #   #     $(pwd)/runner.sh --no-run
  #   - name: Run changed files
  #     run: |
  #       python -c "import torch; print(torch.cuda.is_available())"
  #       git fetch origin master:master
  #       git diff --name-only master | while read line; do [[ $line == *.ipynb ]] && ./runner.sh --file "$line" --no-checks; done

  GPU-quick-py3:  # GPU with full dependencies
    if: github.repository == 'Project-MONAI/MONAI'
    strategy:
      matrix:
        environment:
          - "PT15+CUDA101"
          - "PT16+CUDA102"
          - "PT16+CUDA110"
          - "PT17+CUDA102"
          - "PT17+CUDA110"
        include:
          - environment: PT15+CUDA101
            pytorch: "torch==1.5.0+cu101 torchvision==0.6.0+cu101 -f https://download.pytorch.org/whl/torch_stable.html"
            base: "nvcr.io/nvidia/cuda:10.1-devel-ubuntu18.04"
          - environment: PT16+CUDA102
            pytorch: "torch==1.6.0 torchvision==0.7.0"
            base: "nvcr.io/nvidia/cuda:10.2-devel-ubuntu18.04"
          - environment: PT16+CUDA110
            # we explicitly set pytorch to -h to avoid pip install error
            pytorch: "-h"
            base: "nvcr.io/nvidia/pytorch:20.07-py3"
          - environment: PT17+CUDA102
            pytorch: "torch==1.7.1 torchvision==0.8.2"
            base: "nvcr.io/nvidia/cuda:10.2-devel-ubuntu18.04"
          - environment: PT17+CUDA110
            # we explicitly set pytorch to -h to avoid pip install error
            pytorch: "-h"
            base: "nvcr.io/nvidia/pytorch:20.09-py3"
    container:
      image: ${{ matrix.base }}
      options: --gpus all
    runs-on: [self-hosted, linux, x64, common]
    steps:
    - uses: actions/checkout@v2
    - name: apt install
      run: |
        if [ ${{ matrix.environment }} != "PT16+CUDA110" ]; then \
        PYVER=3.6 PYSFX=3 DISTUTILS=python3-distutils && \
        apt-get update && apt-get install -y --no-install-recommends \
          curl \
          pkg-config \
          python$PYVER \
          python$PYVER-dev \
          python$PYSFX-pip \
          $DISTUTILS \
          rsync \
          swig \
          unzip \
          zip \
          zlib1g-dev \
          libboost-locale-dev \
          libboost-program-options-dev \
          libboost-system-dev \
          libboost-thread-dev \
          libboost-test-dev \
          libgoogle-glog-dev \
          libjsoncpp-dev \
          cmake && \
        rm -rf /var/lib/apt/lists/* && \
        export PYTHONIOENCODING=utf-8 LC_ALL=C.UTF-8 && \
        rm -f /usr/bin/python && \
        rm -f /usr/bin/python`echo $PYVER | cut -c1-1` && \
        ln -s /usr/bin/python$PYVER /usr/bin/python && \
        ln -s /usr/bin/python$PYVER /usr/bin/python`echo $PYVER | cut -c1-1` &&
        curl -O https://bootstrap.pypa.io/get-pip.py && \
        python get-pip.py && \
        rm get-pip.py ; fi
    - name: Install dependencies
      run: |
        which python
        python -c "import torch; print(torch.cuda.is_available())"